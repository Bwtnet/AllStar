Booting a Raspberry Pi2, with u-boot

There are a lot of parts to getting this all working correctly, and I have done this by gluing together a number of blog posts, mailing list posts and a bit of arm knowledge.
First thing to do is to get a working cross compile environment, so you can build on modern x86 hardware which is a lot fast then building on the Pi.
Fortunately in modern Debian or Ubuntu it.s as simple as these commands:

sudo apt-get install gcc-arm-linux-gnueabihf
export ARCH=arm
export CROSS_COMPILE=arm-linux-gnueabihf-
Booting a Raspberry Pi 2 with u-boot

Using u-boot isn.t strictly needed but I much prefer u-boot to the Pi.s normal raw kernel boot. Mainline u-boot has support for the Raspberry Pi 2 so it.s a fairly simple process of:

git clone git://git.denx.de/u-boot.git
cd u-boot
make rpi_2_defconfig
make all
This will give you a u-boot.bin binary that will work on the Raspberry Pi2, transfer this to your Raspberry Pi and change the kernel in config.txt to read:

kernel=u-boot.bin
For the next part you will need a serial console on your Raspberry Pi because the Pi will not autoboot this time. Reboot your Pi and you should see the following message on your serial console:

U-Boot 2015.04-00631-gace97d2 (May 03 2015 - 10:52:52)

DRAM:  944 MiB
WARNING: Caches not enabled
RPI: Board rev 16 outside known range
RPI Unknown model
MMC:   bcm2835_sdhci: 0

In:    serial
Out:   lcd
Err:   lcd
Net:   Net Initialization Skipped
No ethernet found.
Hit any key to stop autoboot:  0
I suggest that you .hand boot. the Pi the first time, to make sure everything works.

You may omit earlyprintk if you're not doing kernel development/testing, and are not experiencing early boot problems.
You may omit console=ttyAMA0 if you don't want to use the serial console.
You may omit console=tty0 if you don't want to use a virtual terminal console (HDMI/USB keyboard).
The root= option is correct for a Raspbian image. You may need to adjust this if your partition layout is different.
The same applies for rootfstype= option. The default FS type is EXT4. You will need to change it if using a different filesystem.


# Tell Linux that it is booting on a Raspberry Pi2
setenv machid 0x00000c42
# Set the kernel boot command line
setenv bootargs "earlyprintk console=tty0 console=ttyAMA0 root=/dev/mmcblk0p2 rootfstype=ext4 rootwait noinitrd"
# Save these changes to u-boot's environment
saveenv
# Load the existing Linux kernel into RAM
fatload mmc 0:1 ${kernel_addr_r} kernel7.img
# Boot the kernel we have just loaded
bootz ${kernel_addr_r}
You should now see Linux booting, I have a little boot script setup to run the last 2 commands automatically.

Put the commands in file and use mkimage to build a u-boot wrapper round them.
Note this example assumes that you are using the Debian Jessie image, if you are using Raspbian then you will need to use /boot/boot.scr as the output path.

raspbian = /boot/boot.scr
jessie = /boot/firmware/boot.scr

mkimage -A arm -O linux -T script -C none -a 0x00000000 -e 0x00000000 -n "RPi2 Boot Script" -d /path/to/script /boot/firmware/boot.scr
